# hrf_opt parameter definitions.

# Part of hrf_opt library
# Copyright (C) 2018  Marian Schneider
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Set the hrf function specific parameters

# Minimum delay for the peak of the hrf function:
varPkDelMin = 2.0

# Maximum delay for the peak of the hrf function:
varPkDelMax = 10.0

# Minimum delay for the undershoot of the hrf function:
varUndDelMin = 8.0

# Maximum delay for the undershoot of the hrf function:
varUndDelMax = 20.0

# Step size for peak and undershoot delay of the hrf function:
varDelStp = 1.0

# Minimum dispersion for the peak of the hrf function:
varPkDspMin = 0.1

# Maximum dispersion for the peak of the hrf function:
varPkDspMax = 3.5

# Minimum dispersion for the undershoot of the hrf function:
varUndDspMin = 0.1

# Maximum dispersion for the undershoot of the hrf function:
varUndDspMax = 3.5

# Step size for peak and undershoot dispersion of the hrf function:
varDspStp = 0.2

# Minimum peak to undershoot ratio:
varPkUndRatMin = 1.5

# Maximum peak to undershoot ratio:
varPkUndRatMax = 10.5

# Step size for the peak to undershoot ratio
varPkUndRatStp = 1.0

# Factor by which time courses and HRF will be upsampled for the convolutions
# Higher number might yield more accurate reults but also takes up more RAM.
varTmpOvsmpl = 20.

# Extent of temporal smoothing for fMRI data and pRF time course models
# [standard deviation of the Gaussian kernel, in seconds]:
# same temporal smoothing will be applied to pRF model time courses
varSdSmthTmp = 0.0

# Set parameters specific to the experiment

# Volume TR of input data [s]:
varTr = 2.0

# Number of fMRI volumes (across all runs):
varNumVol = 1232

# Path of functional data (needs to have same number of volumes as varNumVol):
lstPathNiiFunc = ['~/fnc01.nii', '~/fnc02.nii', '~/fnc03.nii', '~/fnc04.nii']

# Path of mask (to restrict pRF model finding):
strPathNiiMask = '~/msk.nii'

# Path to base of npy file with model parameters and responses:
strPathMdlRsp = '~/pRF_results/prf_model_tc'

# Path to npy files with temporal info about aperture conditions:
strTmpExpInf = '~/expInfo/sptInfo/arySptExpInf.npy'

# Were the model time courses created with suppressive surround?
lgcSupsur = False

# Path to base of nifti files with previous pRF fitting results:
strPathFitRes = '~/pRF_results/pRF_results'

# Set fitting details

# R2 threshold that will be applied for voxel inclusion:
varThrR2 = 0.2

# Number of processes to run in parallel:
varPar = 10

# Should model fitting be based on k-fold cross-validation?
# if desired, it is recommended to set this equal to the number of runs
# if not, set to 1 and no cross-validation will be implemented
# currently only supported for CPU, set to 1 if using GPU
varNumXval = 4

# Output basename:
strPathOut = '~/pRF_results/hrf_opt_results'
